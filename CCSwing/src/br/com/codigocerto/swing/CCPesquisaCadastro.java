/*
 * CCPesquisaCadastro.java
 *
 * Created on 22 de Junho de 2007, 17:06
 */

package br.com.codigocerto.swing;

import br.com.codigocerto.controles.Registro;
import br.com.codigocerto.controles.pesquisas.IModeloPesquisaCad;
import br.com.codigocerto.conversores.ConversorTipos;
import br.com.codigocerto.swing.formularios.UIPesquisarCadastro;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;

/**
 *
 * @author  lis
 */
public class CCPesquisaCadastro extends javax.swing.JPanel {
    
    private long _id;
    private IModeloPesquisaCad _modeloPesquisa;
    private String _campoDescricao;
    private boolean _erro = false;
    
    /** Creates new form CCPesquisaCadastro */
    public CCPesquisaCadastro() {
        initComponents();
        configurar();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        ccLink = new br.com.codigocerto.swing.CCLink();
        ccTextFormatadoProcura = new br.com.codigocerto.swing.CCTextFormatado();
        botaoPesquisar = new br.com.codigocerto.swing.botoes.BotaoPesquisar();

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        ccLink.setText("Cadastro");
        ccLink.setFocusable(false);

        ccTextFormatadoProcura.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ccTextFormatadoProcuraFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ccTextFormatadoProcuraFocusLost(evt);
            }
        });
        ccTextFormatadoProcura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ccTextFormatadoProcuraKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ccTextFormatadoProcuraKeyTyped(evt);
            }
        });

        botaoPesquisar.setText("");
        botaoPesquisar.setFocusable(false);
        botaoPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPesquisarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ccLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ccTextFormatadoProcura, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(ccLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(ccTextFormatadoProcura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(botaoPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        ccTextFormatadoProcura.requestFocusInWindow();
    }//GEN-LAST:event_formFocusGained

    private void ccTextFormatadoProcuraKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ccTextFormatadoProcuraKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_F3) {
            acionarPesquisa();
        } 
    }//GEN-LAST:event_ccTextFormatadoProcuraKeyReleased

    private void botaoPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPesquisarActionPerformed
        acionarPesquisa();
    }//GEN-LAST:event_botaoPesquisarActionPerformed

    private void ccTextFormatadoProcuraFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ccTextFormatadoProcuraFocusLost
        ccTextFormatadoProcura.setSelectionEnd(0);
        if (_erro) {
            ccTextFormatadoProcura.requestFocusInWindow();
        }
            
    }//GEN-LAST:event_ccTextFormatadoProcuraFocusLost

    private void ccTextFormatadoProcuraFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ccTextFormatadoProcuraFocusGained
        selecionarTexto();
    }//GEN-LAST:event_ccTextFormatadoProcuraFocusGained

    private void ccTextFormatadoProcuraKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ccTextFormatadoProcuraKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            if (ccTextFormatadoProcura.getText().length() > 0) {
                String texto = ccTextFormatadoProcura.getText().trim();
                if (texto.indexOf("(") == -1 && texto.indexOf(")") == -1) {
                    procurar();
                }
            }
        }
    }//GEN-LAST:event_ccTextFormatadoProcuraKeyTyped
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private br.com.codigocerto.swing.botoes.BotaoPesquisar botaoPesquisar;
    private br.com.codigocerto.swing.CCLink ccLink;
    private br.com.codigocerto.swing.CCTextFormatado ccTextFormatadoProcura;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void setToolTipText(String text) {
        ccTextFormatadoProcura.setToolTipText(text);
    }
    
    /**
     * Informa id selecionado
     * @return long com id
     */
    public long getId() {
        return _id;
    }
    
    /**
     * Configura id a ser apresentado
     * @param long com id
     */
    public void setId(long id) {
        _id = id;
        ccTextFormatadoProcura.setText("");
        if (_id > 0) {
            ConversorTipos conv = new ConversorTipos();
            conv.setValorBase(_id);
            Registro registro = _modeloPesquisa.getRegistro();
            Object[][] resultado = 
                     registro.procurarCampo(registro.getCampoId(), 
                                            conv.getString(), 
                                            _modeloPesquisa.getCampoDescricao());
            if (resultado != null && resultado.length > 0) {
                if (resultado.length == 1) {
                    apresentarResultado(resultado[0][0], resultado[0][1]);
                }
            }
        }
    }
    
    /**
     * Informa modelo de pesquisa
     * @param IModeloPesquisaCad
     */
    public void setModeloPesquisa(IModeloPesquisaCad modelo) {
        _modeloPesquisa = modelo;
    }
    
    /**
     * Configura acao de abrir form relacionado a pesquisa do cadastro
     * @param ActionListener
     */
    public void setAcaoExibir(ActionListener acao) {
        ccLink.setAcaoForm(acao);
    }

    /**
     * Configura nome amigavel do cadastro a ser pesquisado para apresentar no label
     * @param string com nome amigavel do cadastro
     */
    public void setNomeCadastro(String nomeCadastro) {
        ccLink.setText(nomeCadastro);
    }
    
    /**
     * Configurar acao de informar alteracao
     * @param verdadeiro para informar toda vez que campo for alterado (default)
     */
    public void setInformarAlteracao(boolean informar) {
        ccTextFormatadoProcura.setInformarAlteracao(informar);
    }
    
    private void configurar() {
        final int TAM_CAMPO_PROCURA = 80;
        StringBuilder mascara = new StringBuilder();
        for (int i = 0; i < TAM_CAMPO_PROCURA; i++) {
            mascara.append('X'); // mascara caracter alfanumerico
        }
        ccTextFormatadoProcura.setMascaraEdicao(mascara.toString());
    }

    private void procurar() {
        
        final int INICIO = 0;
        
        boolean encontrado = false;
        long idEncontrado = 0L;
        StringBuilder chave = new StringBuilder();
        chave.append(ccTextFormatadoProcura.getText().trim().toUpperCase());
        
        if (chave.length() > 0) {
        
            String[] colunas = _modeloPesquisa.getPesquisarCadastro().getColunas();
            int i = 0;
            do {
                if (i == 1) { // a partir da segunda coluna acrescenta coringas %
                    chave.insert(INICIO, "'%");
                    chave.insert(chave.length(), "%'");
                }
                Registro registro = _modeloPesquisa.getRegistro();
                Object[][] resultado = 
                        registro.procurarCampo(colunas[i], chave.toString(), 
                        _modeloPesquisa.getCampoDescricao());
                if (resultado != null && resultado.length > 0) {
                    if (resultado.length == 1) {
                        encontrado = true;
                        apresentarResultado(resultado[0][0], resultado[0][1]);
                    }
                    else {
                        encontrado = apresentarPesquisa(ccTextFormatadoProcura.getText().trim());
                    }
                }
                
                i++;
            }
            while (!encontrado && i < colunas.length);
            if (!encontrado) {
                _erro= true;
                GerenciadorAcoesDesktop.exibirAviso("Não foram encontrados registros!");
                ccTextFormatadoProcura.requestFocusInWindow();
            }

        }
    }
    
    private void apresentarResultado(Object id, Object descricao) {
        _erro = false;
        StringBuilder textoIdComDescricao = new StringBuilder();

        _id = (Long) id;
        ConversorTipos conv = new ConversorTipos();
        conv.setValorBase((Long) id);
        textoIdComDescricao.append("(" + conv.getString());
        textoIdComDescricao.append(") " + descricao.toString());
        
        ccTextFormatadoProcura.setText(textoIdComDescricao.toString());
    }
    
    private boolean apresentarPesquisa(String chave) {
        boolean escolhido = false;
        UIPesquisarCadastro formPesquisa = new UIPesquisarCadastro();
        formPesquisa.setModeloPesquisa(_modeloPesquisa);
        formPesquisa.setCriterio(UIPesquisarCadastro.Criterio.QUALQUER_POSICAO);
        formPesquisa.setChave(chave);
        formPesquisa.visualizar();
        long id = formPesquisa.getId();
        if (id > 0) {
            ConversorTipos conv = new ConversorTipos();
            conv.setValorBase(id);
            Object[][] resultado = 
                    _modeloPesquisa.getRegistro().procurarCampo(
                                      _modeloPesquisa.getRegistro().getCampoId(), 
                                            conv.getString(), _modeloPesquisa.getCampoDescricao());
            if (resultado.length == 1) {
                escolhido = true;
                apresentarResultado(resultado[0][0], resultado[0][1]);
            }
        }
        return escolhido;
    }
    
    private void acionarPesquisa() {
        StringBuilder chave = new StringBuilder();
        chave.append(ccTextFormatadoProcura.getText().trim());
        if (chave.length() > 0) {
            if (chave.indexOf("(") >= 0 
                    && chave.indexOf(")") >= 0) {
                chave = new StringBuilder();
            }
        }
        apresentarPesquisa(chave.toString());
    }
    
    private void selecionarTexto() {
        _erro = false;
        String texto = ccTextFormatadoProcura.getText();
        if (texto.length() > 0) {
            ccTextFormatadoProcura.setSelectionStart(0);
            ccTextFormatadoProcura.setSelectionEnd(texto.length());
        }
    }

}
