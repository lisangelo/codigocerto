/*
 * PanelPesquisarCadastro.java
 *
 * Created on 11 de Junho de 2007, 14:27
 */

package br.com.codigocerto.swing.formularios;

import br.com.codigocerto.controles.RegistroTerceiro;
import br.com.codigocerto.modelos.DocumentosTerceiro;
import br.com.codigocerto.modelos.Endereco;
import br.com.codigocerto.modelos.Terceiro;
import br.com.codigocerto.swing.CCDialogo;
import br.com.codigocerto.swing.ControleExcecoes;
import java.awt.event.ActionListener;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import javax.swing.JTable;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/**
 *
 * @author  lis
 */
public class PanelPesquisarCadastro extends javax.swing.JPanel {

    private boolean _exibirDadosAdicionais = false;

    /** Creates new form PanelPesquisarCadastro */
    public PanelPesquisarCadastro() {
        initComponents();
        configurar();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Código Gerado ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        ccTextFieldChave = new br.com.codigocerto.swing.CCTextField();
        botaoPrimeiro = new br.com.codigocerto.swing.botoes.BotaoPrimeiro();
        botaoAnterior = new br.com.codigocerto.swing.botoes.BotaoAnterior();
        botaoProximo = new br.com.codigocerto.swing.botoes.BotaoProximo();
        botaoUltimo = new br.com.codigocerto.swing.botoes.BotaoUltimo();
        jLabel2 = new javax.swing.JLabel();
        ccComboBoxCampo = new br.com.codigocerto.swing.CCComboBox();
        jLabel3 = new javax.swing.JLabel();
        ccComboBoxCriterio = new br.com.codigocerto.swing.CCComboBox();
        jScrollPane = new javax.swing.JScrollPane();
        ccTabelaResultados = new br.com.codigocerto.swing.CCTabela();

        jLabel1.setText("Procurar por");

        ccTextFieldChave.setToolTipText("Sequencia a ser pesquisada com no m\u00ednimo 3 letras");
        ccTextFieldChave.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ccTextFieldChaveKeyReleased(evt);
            }
        });

        jLabel2.setText("em");

        jLabel3.setText("Crit\u00e9rio");

        ccComboBoxCriterio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Iniciando", "Qualquer posi\u00e7\u00e3o" }));

        ccTabelaResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        ccTabelaResultados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ccTabelaResultadosMouseClicked(evt);
            }
        });
        ccTabelaResultados.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ccTabelaResultadosKeyPressed(evt);
            }
        });

        jScrollPane.setViewportView(ccTabelaResultados);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                    .addComponent(ccTextFieldChave, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ccComboBoxCampo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(botaoPrimeiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botaoAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botaoProximo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botaoUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ccComboBoxCriterio, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ccTextFieldChave, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoPrimeiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoProximo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ccComboBoxCampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(ccComboBoxCriterio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ccTabelaResultadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ccTabelaResultadosMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) { // botao esquerdo
            if (evt.getClickCount() == 2) { // duplo clique
                dispararSair();
            }
        } else {
            if (_exibirDadosAdicionais) {
                exibirDados();
            }
        }
    }//GEN-LAST:event_ccTabelaResultadosMouseClicked

    private void ccTabelaResultadosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ccTabelaResultadosKeyPressed
        controleTeclasTabela(evt);
    }//GEN-LAST:event_ccTabelaResultadosKeyPressed

    private void ccTextFieldChaveKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ccTextFieldChaveKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) { // seta para baixo
            focarResultados();
        }
    }//GEN-LAST:event_ccTextFieldChaveKeyReleased
    
    
    // Declaração de variáveis - não modifique//GEN-BEGIN:variables
    private br.com.codigocerto.swing.botoes.BotaoAnterior botaoAnterior;
    private br.com.codigocerto.swing.botoes.BotaoPrimeiro botaoPrimeiro;
    private br.com.codigocerto.swing.botoes.BotaoProximo botaoProximo;
    private br.com.codigocerto.swing.botoes.BotaoUltimo botaoUltimo;
    private br.com.codigocerto.swing.CCComboBox ccComboBoxCampo;
    private br.com.codigocerto.swing.CCComboBox ccComboBoxCriterio;
    private br.com.codigocerto.swing.CCTabela ccTabelaResultados;
    private br.com.codigocerto.swing.CCTextField ccTextFieldChave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane;
    // Fim da declaração de variáveis//GEN-END:variables

    private void configurar() {
        ccTabelaResultados.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        ccTabelaResultados.setRowSelectionAllowed(true);
    }
    
    /**
     *Configura modelo de tabela para apresentacao dos resultados
     *@param TableModel modelo de tabla
     */
    public void setModeloTabela(TableModel modelo) {
        ccTabelaResultados.setModel(modelo);
    }
    
    /**
     *Configura nome dos campos a serem pesquisadas
     *@param String[] com nome amigavel das colunas
     */
    public void setNomeCampos(String[] nomeCampos) {
        ccComboBoxCampo.removeAllItems();
        if (nomeCampos != null) {
            for (int i = 0; i < nomeCampos.length; i++) {
                ccComboBoxCampo.addItem(nomeCampos[i]);
            }
        }
    }
    
    /**
     *Configura campo inicial
     *@param int com ordem do campo
     */
    public void setCampoInicial(int indiceCampo) {
        if (indiceCampo >= 0) {
            if (indiceCampo < ccComboBoxCampo.getItemCount()) {
                ccComboBoxCampo.setSelectedIndex(indiceCampo);
            }
        }
    }
    
    /**
     *Configura largura das colunas
     *@param int[] com larguras
     */
    public void setLarguraColunas(int[] larguras) {
        if (larguras.length == ccTabelaResultados.getColumnCount()) {
            TableColumn coluna;
            for (int i = 0; i < ccTabelaResultados.getColumnCount(); i++) {
                coluna = ccTabelaResultados.getColumnModel().getColumn(i);
                coluna.setMinWidth(larguras[i]);
            }
        }
    }
    
    /**
     *Informa texto digitado no campo chave
     *@return string com chave
     */
    public String getChave() {
        StringBuilder chave = new StringBuilder("");
        if (ccTextFieldChave.getText().length() > 0) {
            chave.append(ccTextFieldChave.getText());
        }
        return chave.toString();
    }

    /**
     * Ajusta campo chave
     * @param string com chave
     */
    public void setChave(String chave) {
        ccTextFieldChave.setText(chave);
    }
    
    
    /**
     *Informe indice atual do campo chave
     *@return int indice
     */
    public int getIndiceCampoChave() {
        return ccComboBoxCampo.getSelectedIndex();
    }
    
    /**
     *Configura acao para campo chave
     *@param KeyListener acao
     */
    public void setAcaoEfetuarPesquisa(KeyListener acao) {
        ccTextFieldChave.addKeyListener(acao);
    }
    
    /**
     *Configura acao para item alterado no criterio
     *@param ItemListener acao
     */
    public void setAcaoCriterio(ItemListener acao) {
        ccComboBoxCriterio.addItemListener(acao);
    }

    /**
     *Configura acao para item alterado no campo de pesquisa
     *@param ItemListener acao
     */
    public void setAcaoCampo(ItemListener acao) {
        ccComboBoxCampo.addItemListener(acao);
    }
    
    /**
     *Configura acao para botao primeiro
     *@param ActionListener acao
     */
    public void setAcaoPrimeiro(ActionListener acao) {
        botaoPrimeiro.addActionListener(acao);
    }
    
    /**
     *Configura acao para botao anterior
     *@param ActionListener acao
     */
    public void setAcaoAnterior(ActionListener acao) {
        botaoAnterior.addActionListener(acao);
    }

    /**
     *Configura acao para botao primeiro
     *@param ActionListener acao
     */
    public void setAcaoProximo(ActionListener acao) {
        botaoProximo.addActionListener(acao);
    }

    /**
     *Configura acao para botao ultimo
     *@param ActionListener acao
     */
    public void setAcaoUltimo(ActionListener acao) {
        botaoUltimo.addActionListener(acao);
    }

    /**
     *Colocar foco sobre campo chave
     */
    public void focarChave() {
        ccTextFieldChave.requestFocus();
    }

    /**
     *Colocar foco sobre tabela de Resultados
     */
    public void focarResultados() {
        ccTabelaResultados.requestFocusInWindow();
    }
    
    /**
     *Informa linha selecionada na tabela de resultados
     *@return String[] com dados da linha selecionada
     */
    public Object getSelecao(int indiceColuna) {
        Object celula = null;
        int linhaSelecionada = ccTabelaResultados.getSelectedRow();
        if (linhaSelecionada >= 0) {
            celula = ccTabelaResultados.getModel().getValueAt(linhaSelecionada, indiceColuna);
        }
        
        return celula;
    }

    /**
     *Informa toda a linha selecionada na tabela de resultados
     *@return String[] com dados da linha selecionada
     */
    public Object[] getSelecao() {
        Object[] celulas = null;
        int linhaSelecionada = ccTabelaResultados.getSelectedRow();
        if (linhaSelecionada >= 0) {
            celulas = new Object[ccTabelaResultados.getModel().getColumnCount()];
            for (int i = 0; i < celulas.length; i++) {
                celulas[i] = ccTabelaResultados.getModel().getValueAt(linhaSelecionada, i);
            }
        }
        
        return celulas;
    }

    /**
     * Configura criterio inicial a ser utilizado na pesquisa
     * @param criterio int
     */
    public void setCriterio(int criterio) {
        ccComboBoxCriterio.setSelectedIndex(criterio);
    }

    public void setExibirDadosAdicionais(boolean indicador) {
        _exibirDadosAdicionais = indicador;
    }
    
    private void controleTeclasTabela(KeyEvent evt) {
        int tecla = evt.getKeyCode();
        switch (tecla) {
            case KeyEvent.VK_UP:
                if (ccTabelaResultados.getSelectedRow() == 0) { // primeira linha
                    ccTextFieldChave.requestFocusInWindow();
                }
                break;
            case KeyEvent.VK_DOWN:    
                if (ccTabelaResultados.getSelectedRow() == 
                        ccTabelaResultados.getRowCount() - 1) { // ultima linha
                    botaoPrimeiro.requestFocusInWindow();
                }
                break;
            case KeyEvent.VK_ENTER:
                dispararSair();
                break;
        }        
    }
    
    private void dispararSair() {
        try {
            CCDialogo dialogo = (CCDialogo) getTopLevelAncestor();
            dialogo.sair();
        }
        catch (ClassCastException e) {
            ControleExcecoes.capturarExcecao(e);
        }
    }

    private void exibirDados() {
        final String NOVA_LINHA = "\n";

        RegistroTerceiro reg = new RegistroTerceiro();
        reg.setTipoTerceiro(0);
        Terceiro terceiro = reg.getDados(Long.valueOf(getSelecao(0).toString()));
        if (terceiro != null) {
            StringBuilder texto = new StringBuilder();
            texto.append(terceiro.getNome());
            texto.append(NOVA_LINHA);
            for (int i = 0; i < terceiro.getNumeroEnderecos(); i++) {
                switch(terceiro.getEndereco(i).getTipo()) {
                    case Endereco.Tipo.COMERCIAL:
                        texto.append("COMERCIAL");
                        break;
                    case Endereco.Tipo.ENTREGA:
                        texto.append("ENTREGA");
                        break;
                    case Endereco.Tipo.FINANCEIRO:
                        texto.append("FINANCEIRO");
                        break;
                    case Endereco.Tipo.RESIDENCIAL:
                        texto.append("RESIDENCIAL");
                        break;
                }
                texto.append(NOVA_LINHA);
                texto.append(terceiro.getEndereco(i).getLogradouro());
                texto.append(" " + terceiro.getEndereco(i).getNumero());
                texto.append(NOVA_LINHA);
                texto.append(terceiro.getEndereco(i).getBairro().getNome());
                texto.append(NOVA_LINHA);
                texto.append(terceiro.getEndereco(i).getCidade().getNome());
                texto.append(NOVA_LINHA);
                texto.append(terceiro.getEndereco(i).getCidade().getEstado().getSigla());
                texto.append(NOVA_LINHA);
            }
            if (terceiro.getDocumentos() != null) {
                if (terceiro.getDocumentos().getPessoa().equals(DocumentosTerceiro.Pessoa.JURIDICA)) {
                    texto.append("CNPJ " + terceiro.getDocumentos().getCNPJ().getDocumentoFormatado());
                    texto.append(NOVA_LINHA);
                    texto.append("IE " + terceiro.getDocumentos().getInscricaoEstadual());
                    texto.append(NOVA_LINHA);
                } else {
                    texto.append("CPF " + terceiro.getDocumentos().getCPF().getDocumentoFormatado());
                    texto.append(NOVA_LINHA);
                }
            }

            Avisos.exibirAviso(this, texto.toString());
        }
    }
    
}
